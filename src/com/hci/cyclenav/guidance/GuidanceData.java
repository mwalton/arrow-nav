package com.hci.cyclenav.guidance;

import com.google.gson.annotations.SerializedName;

/* GuidanceData.java
 * Deserialized object generated by JSONHelper using GSON
 * This the returned object should be considered 'raw' or interface data
 * and should be passed to the GuidanceRoute constructor
 * which adapts between OGS JSON to the MQ android API datatypes
 */
public class GuidanceData {
	@SerializedName("shapePoints")
	double[] shapePoints;
	@SerializedName("GuidanceNodeCollection")
	GuidanceNode[] GuidanceNodeCollection;
	@SerializedName("GuidanceLinkCollection")
	GuidanceLink[] GuidanceLinkCollection;
	BoundingBox boundingBox;
	
	@SerializedName("statuscode")
	int statuscode;
	@SerializedName("messages")
	String[] messages;
	
	int RouteLinkCount;

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();

		sb.append("Box: [" + boundingBox.ul.toString() + "]\n["
				+ boundingBox.lr.toString() + "]\n");
		sb.append("Route Link Count: " + RouteLinkCount + "\n");
		sb.append("Total Shape Points: " + shapePoints.length + "\n");
		sb.append("Guidance Node Count: " + GuidanceNodeCollection.length
				+ "\n");
		sb.append("Guidance Link Count: " + GuidanceLinkCollection.length
				+ "\n");

		return sb.toString();
	}
	
	public String[] getMessages() {
		return messages;
	}
	
	public int getStatusCode() {
		return statuscode;
	}

	class GuidanceNode {
		@SerializedName("infoCollection")
		String[] infoCollection;
		@SerializedName("linkIds")
		int[] linkIds;
		int maneuverType;

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder();

			sb.append("Info: ");
			if (infoCollection != null) {
				for (int i = 0; i < infoCollection.length; ++i) {
					sb.append(", " + infoCollection[i]);
				}
			} else
				sb.append("none");
			sb.append("\nManeuver: " + maneuverType + "\n");
			sb.append("linkIds: ");
			if (linkIds != null) {
				for (int i = 0; i < linkIds.length; ++i) {
					sb.append(linkIds[i]);
				}
			} else
				sb.append("none");
			return sb.toString();
		}
	}

	class GuidanceLink {
		int shapeIndex;
		int shapeCount;
		double length;

		@Override
		public String toString() {
			return "S Index: " + shapeIndex + "S Count: " + shapeCount
					+ "Length: " + length + "\n";
		}
	}

	class GeoPoint {
		double lat;
		double lng;

		@Override
		public String toString() {
			return lat + ", " + lng;
		}
	}

	class BoundingBox {
		GeoPoint ul;
		GeoPoint lr;
	}
}
